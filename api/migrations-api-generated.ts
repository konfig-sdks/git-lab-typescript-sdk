/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MigrationsMarkAsExecutedRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MigrationsApi - axios parameter creator
 * @export
 */
export const MigrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Mark the migration as successfully executed
         * @param {number} timestamp The migration version timestamp
         * @param {MigrationsMarkAsExecutedRequest} [migrationsMarkAsExecutedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsExecuted: async (timestamp: number, migrationsMarkAsExecutedRequest?: MigrationsMarkAsExecutedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('markAsExecuted', 'timestamp', timestamp)
            const localVarPath = `/api/v4/admin/migrations/{timestamp}/mark`
                .replace(`{${"timestamp"}}`, encodeURIComponent(String(timestamp !== undefined ? timestamp : `-timestamp-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: migrationsMarkAsExecutedRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/migrations/{timestamp}/mark',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(migrationsMarkAsExecutedRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MigrationsApi - functional programming interface
 * @export
 */
export const MigrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MigrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Mark the migration as successfully executed
         * @param {MigrationsApiMarkAsExecutedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsExecuted(requestParameters: MigrationsApiMarkAsExecutedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const migrationsMarkAsExecutedRequest: MigrationsMarkAsExecutedRequest = {
                database: requestParameters.database
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsExecuted(requestParameters.timestamp, migrationsMarkAsExecutedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MigrationsApi - factory interface
 * @export
 */
export const MigrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MigrationsApiFp(configuration)
    return {
        /**
         * Mark the migration as successfully executed
         * @param {MigrationsApiMarkAsExecutedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsExecuted(requestParameters: MigrationsApiMarkAsExecutedRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAsExecuted(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for markAsExecuted operation in MigrationsApi.
 * @export
 * @interface MigrationsApiMarkAsExecutedRequest
 */
export type MigrationsApiMarkAsExecutedRequest = {
    
    /**
    * The migration version timestamp
    * @type {number}
    * @memberof MigrationsApiMarkAsExecuted
    */
    readonly timestamp: number
    
} & MigrationsMarkAsExecutedRequest

/**
 * MigrationsApiGenerated - object-oriented interface
 * @export
 * @class MigrationsApiGenerated
 * @extends {BaseAPI}
 */
export class MigrationsApiGenerated extends BaseAPI {
    /**
     * Mark the migration as successfully executed
     * @param {MigrationsApiMarkAsExecutedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MigrationsApiGenerated
     */
    public markAsExecuted(requestParameters: MigrationsApiMarkAsExecutedRequest, options?: AxiosRequestConfig) {
        return MigrationsApiFp(this.configuration).markAsExecuted(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
