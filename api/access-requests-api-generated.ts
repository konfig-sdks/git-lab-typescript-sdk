/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesAccessRequester } from '../models';
// @ts-ignore
import { AccessrequestsApproveForUserRequest } from '../models';
// @ts-ignore
import { AccessrequestsApproveForUserRequest1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccessRequestsApi - axios parameter creator
 * @export
 */
export const AccessRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Approves an access request for the given user.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user
         * @param {number} userId The user ID of the access requester
         * @param {AccessrequestsApproveForUserRequest} [accessrequestsApproveForUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveForUser: async (id: string, userId: number, accessrequestsApproveForUserRequest?: AccessrequestsApproveForUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approveForUser', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('approveForUser', 'userId', userId)
            const localVarPath = `/api/v4/groups/{id}/access_requests/{user_id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accessrequestsApproveForUserRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/access_requests/{user_id}/approve',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accessrequestsApproveForUserRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Approves an access request for the given user.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user
         * @param {number} userId The user ID of the access requester
         * @param {AccessrequestsApproveForUserRequest1} [accessrequestsApproveForUserRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveForUser_1: async (id: string, userId: number, accessrequestsApproveForUserRequest1?: AccessrequestsApproveForUserRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approveForUser_1', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('approveForUser_1', 'userId', userId)
            const localVarPath = `/api/v4/projects/{id}/access_requests/{user_id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accessrequestsApproveForUserRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/access_requests/{user_id}/approve',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accessrequestsApproveForUserRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Denies an access request for the given user.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user
         * @param {number} userId The user ID of the access requester
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyAccessToUser: async (id: string, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('denyAccessToUser', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('denyAccessToUser', 'userId', userId)
            const localVarPath = `/api/v4/groups/{id}/access_requests/{user_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/access_requests/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Denies an access request for the given user.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user
         * @param {number} userId The user ID of the access requester
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyAccessToUser_2: async (id: string, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('denyAccessToUser_2', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('denyAccessToUser_2', 'userId', userId)
            const localVarPath = `/api/v4/projects/{id}/access_requests/{user_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-user_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/access_requests/{user_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Gets a list of access requests for a group.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getList', 'id', id)
            const localVarPath = `/api/v4/groups/{id}/access_requests`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/access_requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Gets a list of access requests for a project.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList_3: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getList_3', 'id', id)
            const localVarPath = `/api/v4/projects/{id}/access_requests`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/access_requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Requests access for the authenticated user to a group.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccessToGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('requestAccessToGroup', 'id', id)
            const localVarPath = `/api/v4/groups/{id}/access_requests`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/access_requests',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Requests access for the authenticated user to a project.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccessToProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('requestAccessToProject', 'id', id)
            const localVarPath = `/api/v4/projects/{id}/access_requests`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/access_requests',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessRequestsApi - functional programming interface
 * @export
 */
export const AccessRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Approves an access request for the given user.
         * @param {AccessRequestsApiApproveForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveForUser(requestParameters: AccessRequestsApiApproveForUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAccessRequester>> {
            const accessrequestsApproveForUserRequest: AccessrequestsApproveForUserRequest = {
                access_level: requestParameters.access_level
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveForUser(requestParameters.id, requestParameters.userId, accessrequestsApproveForUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Approves an access request for the given user.
         * @param {AccessRequestsApiApproveForUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveForUser_1(requestParameters: AccessRequestsApiApproveForUser0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAccessRequester>> {
            const accessrequestsApproveForUserRequest1: AccessrequestsApproveForUserRequest1 = {
                access_level: requestParameters.access_level
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveForUser_1(requestParameters.id, requestParameters.userId, accessrequestsApproveForUserRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Denies an access request for the given user.
         * @param {AccessRequestsApiDenyAccessToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denyAccessToUser(requestParameters: AccessRequestsApiDenyAccessToUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denyAccessToUser(requestParameters.id, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Denies an access request for the given user.
         * @param {AccessRequestsApiDenyAccessToUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denyAccessToUser_2(requestParameters: AccessRequestsApiDenyAccessToUser0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denyAccessToUser_2(requestParameters.id, requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Gets a list of access requests for a group.
         * @param {AccessRequestsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: AccessRequestsApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAccessRequester>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.id, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Gets a list of access requests for a project.
         * @param {AccessRequestsApiGetList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList_3(requestParameters: AccessRequestsApiGetList0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAccessRequester>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList_3(requestParameters.id, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Requests access for the authenticated user to a group.
         * @param {AccessRequestsApiRequestAccessToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestAccessToGroup(requestParameters: AccessRequestsApiRequestAccessToGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAccessRequester>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestAccessToGroup(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Requests access for the authenticated user to a project.
         * @param {AccessRequestsApiRequestAccessToProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestAccessToProject(requestParameters: AccessRequestsApiRequestAccessToProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAccessRequester>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestAccessToProject(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccessRequestsApi - factory interface
 * @export
 */
export const AccessRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessRequestsApiFp(configuration)
    return {
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Approves an access request for the given user.
         * @param {AccessRequestsApiApproveForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveForUser(requestParameters: AccessRequestsApiApproveForUserRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAccessRequester> {
            return localVarFp.approveForUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Approves an access request for the given user.
         * @param {AccessRequestsApiApproveForUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveForUser_1(requestParameters: AccessRequestsApiApproveForUser0Request, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAccessRequester> {
            return localVarFp.approveForUser_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Denies an access request for the given user.
         * @param {AccessRequestsApiDenyAccessToUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyAccessToUser(requestParameters: AccessRequestsApiDenyAccessToUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.denyAccessToUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Denies an access request for the given user.
         * @param {AccessRequestsApiDenyAccessToUser0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denyAccessToUser_2(requestParameters: AccessRequestsApiDenyAccessToUser0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.denyAccessToUser_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Gets a list of access requests for a group.
         * @param {AccessRequestsApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: AccessRequestsApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAccessRequester> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Gets a list of access requests for a project.
         * @param {AccessRequestsApiGetList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList_3(requestParameters: AccessRequestsApiGetList0Request, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAccessRequester> {
            return localVarFp.getList_3(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Requests access for the authenticated user to a group.
         * @param {AccessRequestsApiRequestAccessToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccessToGroup(requestParameters: AccessRequestsApiRequestAccessToGroupRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAccessRequester> {
            return localVarFp.requestAccessToGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.11.
         * @summary Requests access for the authenticated user to a project.
         * @param {AccessRequestsApiRequestAccessToProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestAccessToProject(requestParameters: AccessRequestsApiRequestAccessToProjectRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAccessRequester> {
            return localVarFp.requestAccessToProject(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveForUser operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiApproveForUserRequest
 */
export type AccessRequestsApiApproveForUserRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiApproveForUser
    */
    readonly id: string
    
    /**
    * The user ID of the access requester
    * @type {number}
    * @memberof AccessRequestsApiApproveForUser
    */
    readonly userId: number
    
} & AccessrequestsApproveForUserRequest

/**
 * Request parameters for approveForUser_1 operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiApproveForUser0Request
 */
export type AccessRequestsApiApproveForUser0Request = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiApproveForUser0
    */
    readonly id: string
    
    /**
    * The user ID of the access requester
    * @type {number}
    * @memberof AccessRequestsApiApproveForUser0
    */
    readonly userId: number
    
} & AccessrequestsApproveForUserRequest1

/**
 * Request parameters for denyAccessToUser operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiDenyAccessToUserRequest
 */
export type AccessRequestsApiDenyAccessToUserRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiDenyAccessToUser
    */
    readonly id: string
    
    /**
    * The user ID of the access requester
    * @type {number}
    * @memberof AccessRequestsApiDenyAccessToUser
    */
    readonly userId: number
    
}

/**
 * Request parameters for denyAccessToUser_2 operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiDenyAccessToUser0Request
 */
export type AccessRequestsApiDenyAccessToUser0Request = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiDenyAccessToUser0
    */
    readonly id: string
    
    /**
    * The user ID of the access requester
    * @type {number}
    * @memberof AccessRequestsApiDenyAccessToUser0
    */
    readonly userId: number
    
}

/**
 * Request parameters for getList operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiGetListRequest
 */
export type AccessRequestsApiGetListRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiGetList
    */
    readonly id: string
    
    /**
    * Current page number
    * @type {number}
    * @memberof AccessRequestsApiGetList
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof AccessRequestsApiGetList
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getList_3 operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiGetList0Request
 */
export type AccessRequestsApiGetList0Request = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiGetList0
    */
    readonly id: string
    
    /**
    * Current page number
    * @type {number}
    * @memberof AccessRequestsApiGetList0
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof AccessRequestsApiGetList0
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for requestAccessToGroup operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiRequestAccessToGroupRequest
 */
export type AccessRequestsApiRequestAccessToGroupRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiRequestAccessToGroup
    */
    readonly id: string
    
}

/**
 * Request parameters for requestAccessToProject operation in AccessRequestsApi.
 * @export
 * @interface AccessRequestsApiRequestAccessToProjectRequest
 */
export type AccessRequestsApiRequestAccessToProjectRequest = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user
    * @type {string}
    * @memberof AccessRequestsApiRequestAccessToProject
    */
    readonly id: string
    
}

/**
 * AccessRequestsApiGenerated - object-oriented interface
 * @export
 * @class AccessRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class AccessRequestsApiGenerated extends BaseAPI {
    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Approves an access request for the given user.
     * @param {AccessRequestsApiApproveForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public approveForUser(requestParameters: AccessRequestsApiApproveForUserRequest, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).approveForUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Approves an access request for the given user.
     * @param {AccessRequestsApiApproveForUser0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public approveForUser_1(requestParameters: AccessRequestsApiApproveForUser0Request, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).approveForUser_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Denies an access request for the given user.
     * @param {AccessRequestsApiDenyAccessToUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public denyAccessToUser(requestParameters: AccessRequestsApiDenyAccessToUserRequest, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).denyAccessToUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Denies an access request for the given user.
     * @param {AccessRequestsApiDenyAccessToUser0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public denyAccessToUser_2(requestParameters: AccessRequestsApiDenyAccessToUser0Request, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).denyAccessToUser_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Gets a list of access requests for a group.
     * @param {AccessRequestsApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public getList(requestParameters: AccessRequestsApiGetListRequest, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Gets a list of access requests for a project.
     * @param {AccessRequestsApiGetList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public getList_3(requestParameters: AccessRequestsApiGetList0Request, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).getList_3(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Requests access for the authenticated user to a group.
     * @param {AccessRequestsApiRequestAccessToGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public requestAccessToGroup(requestParameters: AccessRequestsApiRequestAccessToGroupRequest, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).requestAccessToGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.11.
     * @summary Requests access for the authenticated user to a project.
     * @param {AccessRequestsApiRequestAccessToProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestsApiGenerated
     */
    public requestAccessToProject(requestParameters: AccessRequestsApiRequestAccessToProjectRequest, options?: AxiosRequestConfig) {
        return AccessRequestsApiFp(this.configuration).requestAccessToProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
