/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesBulkImport } from '../models';
// @ts-ignore
import { APIEntitiesBulkImports } from '../models';
// @ts-ignore
import { BulkimportsStartNewMigrationRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BulkImportsApi - axios parameter creator
 * @export
 */
export const BulkImportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary Get GitLab Migration entity details
         * @param {number} importId The ID of user\&#39;s GitLab Migration
         * @param {number} entityId The ID of GitLab Migration entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDetails: async (importId: number, entityId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            assertParamExists('getEntityDetails', 'importId', importId)
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('getEntityDetails', 'entityId', entityId)
            const localVarPath = `/api/v4/bulk_imports/{import_id}/entities/{entity_id}`
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId !== undefined ? importId : `-import_id-`)))
                .replace(`{${"entity_id"}}`, encodeURIComponent(String(entityId !== undefined ? entityId : `-entity_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/bulk_imports/{import_id}/entities/{entity_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary Get GitLab Migration details
         * @param {number} importId The ID of user\&#39;s GitLab Migration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigrationDetails: async (importId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            assertParamExists('getMigrationDetails', 'importId', importId)
            const localVarPath = `/api/v4/bulk_imports/{import_id}`
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId !== undefined ? importId : `-import_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/bulk_imports/{import_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List GitLab Migration entities
         * @param {number} importId The ID of user\&#39;s GitLab Migration
         * @param {'created' | 'started' | 'finished' | 'timeout' | 'failed'} [status] Return import entities with specified status
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities: async (importId: number, status?: 'created' | 'started' | 'finished' | 'timeout' | 'failed', page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            assertParamExists('listEntities', 'importId', importId)
            const localVarPath = `/api/v4/bulk_imports/{import_id}/entities`
                .replace(`{${"import_id"}}`, encodeURIComponent(String(importId !== undefined ? importId : `-import_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/bulk_imports/{import_id}/entities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List all GitLab Migrations\' entities
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {'asc' | 'desc'} [sort] Return GitLab Migrations sorted in created by &#x60;asc&#x60; or &#x60;desc&#x60; order.
         * @param {'created' | 'started' | 'finished' | 'timeout' | 'failed'} [status] Return all GitLab Migrations\&#39; entities with specified status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities_1: async (page?: number, perPage?: number, sort?: 'asc' | 'desc', status?: 'created' | 'started' | 'finished' | 'timeout' | 'failed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/bulk_imports/entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/bulk_imports/entities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List all GitLab Migrations
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {'asc' | 'desc'} [sort] Return GitLab Migrations sorted in created by &#x60;asc&#x60; or &#x60;desc&#x60; order.
         * @param {'created' | 'started' | 'finished' | 'timeout' | 'failed'} [status] Return GitLab Migrations with specified status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMigrations: async (page?: number, perPage?: number, sort?: 'asc' | 'desc', status?: 'created' | 'started' | 'finished' | 'timeout' | 'failed', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/bulk_imports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/bulk_imports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 14.2.
         * @summary Start a new GitLab Migration
         * @param {string} configurationUrl Source GitLab instance URL
         * @param {string} configurationAccessToken Access token to the source GitLab instance
         * @param {Array<string>} entitiesSourceType Source entity type
         * @param {Array<string>} entitiesSourceFullPath Relative path of the source entity to import
         * @param {Array<string>} entitiesDestinationNamespace Destination namespace for the entity
         * @param {BulkimportsStartNewMigrationRequest} bulkimportsStartNewMigrationRequest 
         * @param {Array<string>} [entitiesDestinationSlug] Destination slug for the entity
         * @param {Array<string>} [entitiesDestinationName] Deprecated: Use :destination_slug instead. Destination slug for the entity
         * @param {Array<boolean>} [entitiesMigrateProjects] Indicates group migration should include nested projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startNewMigration: async (configurationUrl: string, configurationAccessToken: string, entitiesSourceType: Array<string>, entitiesSourceFullPath: Array<string>, entitiesDestinationNamespace: Array<string>, bulkimportsStartNewMigrationRequest: BulkimportsStartNewMigrationRequest, entitiesDestinationSlug?: Array<string>, entitiesDestinationName?: Array<string>, entitiesMigrateProjects?: Array<boolean>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configurationUrl' is not null or undefined
            assertParamExists('startNewMigration', 'configurationUrl', configurationUrl)
            // verify required parameter 'configurationAccessToken' is not null or undefined
            assertParamExists('startNewMigration', 'configurationAccessToken', configurationAccessToken)
            // verify required parameter 'entitiesSourceType' is not null or undefined
            assertParamExists('startNewMigration', 'entitiesSourceType', entitiesSourceType)
            // verify required parameter 'entitiesSourceFullPath' is not null or undefined
            assertParamExists('startNewMigration', 'entitiesSourceFullPath', entitiesSourceFullPath)
            // verify required parameter 'entitiesDestinationNamespace' is not null or undefined
            assertParamExists('startNewMigration', 'entitiesDestinationNamespace', entitiesDestinationNamespace)
            // verify required parameter 'bulkimportsStartNewMigrationRequest' is not null or undefined
            assertParamExists('startNewMigration', 'bulkimportsStartNewMigrationRequest', bulkimportsStartNewMigrationRequest)
            const localVarPath = `/api/v4/bulk_imports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

            if (configurationUrl !== undefined) {
                await addFormParam('configuration[url]', configurationUrl, false, true)
            }
    
            if (configurationAccessToken !== undefined) {
                await addFormParam('configuration[access_token]', configurationAccessToken, false, true)
            }
            if (entitiesSourceType) {
            localVarFormParams.set('entities[source_type]', entitiesSourceType.join(COLLECTION_FORMATS.csv));
            }

            if (entitiesSourceFullPath) {
            localVarFormParams.set('entities[source_full_path]', entitiesSourceFullPath.join(COLLECTION_FORMATS.csv));
            }

            if (entitiesDestinationNamespace) {
            localVarFormParams.set('entities[destination_namespace]', entitiesDestinationNamespace.join(COLLECTION_FORMATS.csv));
            }

            if (entitiesDestinationSlug) {
            localVarFormParams.set('entities[destination_slug]', entitiesDestinationSlug.join(COLLECTION_FORMATS.csv));
            }

            if (entitiesDestinationName) {
            localVarFormParams.set('entities[destination_name]', entitiesDestinationName.join(COLLECTION_FORMATS.csv));
            }

            if (entitiesMigrateProjects) {
            localVarFormParams.set('entities[migrate_projects]', entitiesMigrateProjects.join(COLLECTION_FORMATS.csv));
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: bulkimportsStartNewMigrationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/bulk_imports',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(bulkimportsStartNewMigrationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BulkImportsApi - functional programming interface
 * @export
 */
export const BulkImportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BulkImportsApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary Get GitLab Migration entity details
         * @param {BulkImportsApiGetEntityDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntityDetails(requestParameters: BulkImportsApiGetEntityDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBulkImports>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntityDetails(requestParameters.importId, requestParameters.entityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary Get GitLab Migration details
         * @param {BulkImportsApiGetMigrationDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMigrationDetails(requestParameters: BulkImportsApiGetMigrationDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBulkImport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMigrationDetails(requestParameters.importId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List GitLab Migration entities
         * @param {BulkImportsApiListEntitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEntities(requestParameters: BulkImportsApiListEntitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesBulkImports>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEntities(requestParameters.importId, requestParameters.status, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List all GitLab Migrations\' entities
         * @param {BulkImportsApiListEntities0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEntities_1(requestParameters: BulkImportsApiListEntities0Request = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesBulkImports>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEntities_1(requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List all GitLab Migrations
         * @param {BulkImportsApiListMigrationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMigrations(requestParameters: BulkImportsApiListMigrationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesBulkImport>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMigrations(requestParameters.page, requestParameters.perPage, requestParameters.sort, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 14.2.
         * @summary Start a new GitLab Migration
         * @param {BulkImportsApiStartNewMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startNewMigration(requestParameters: BulkImportsApiStartNewMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBulkImport>> {
            const bulkimportsStartNewMigrationRequest: BulkimportsStartNewMigrationRequest = {
                configuration[url]: requestParameters.configuration[url],
                configuration[access_token]: requestParameters.configuration[access_token],
                entities[source_type]: requestParameters.entities[source_type],
                entities[source_full_path]: requestParameters.entities[source_full_path],
                entities[destination_namespace]: requestParameters.entities[destination_namespace],
                entities[destination_slug]: requestParameters.entities[destination_slug],
                entities[destination_name]: requestParameters.entities[destination_name],
                entities[migrate_projects]: requestParameters.entities[migrate_projects]
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.startNewMigration(requestParameters.configurationUrl, requestParameters.configurationAccessToken, requestParameters.entitiesSourceType, requestParameters.entitiesSourceFullPath, requestParameters.entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, requestParameters.entitiesDestinationSlug, requestParameters.entitiesDestinationName, requestParameters.entitiesMigrateProjects, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BulkImportsApi - factory interface
 * @export
 */
export const BulkImportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BulkImportsApiFp(configuration)
    return {
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary Get GitLab Migration entity details
         * @param {BulkImportsApiGetEntityDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDetails(requestParameters: BulkImportsApiGetEntityDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBulkImports> {
            return localVarFp.getEntityDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary Get GitLab Migration details
         * @param {BulkImportsApiGetMigrationDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigrationDetails(requestParameters: BulkImportsApiGetMigrationDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBulkImport> {
            return localVarFp.getMigrationDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List GitLab Migration entities
         * @param {BulkImportsApiListEntitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities(requestParameters: BulkImportsApiListEntitiesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesBulkImports>> {
            return localVarFp.listEntities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List all GitLab Migrations\' entities
         * @param {BulkImportsApiListEntities0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEntities_1(requestParameters: BulkImportsApiListEntities0Request = {}, options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesBulkImports>> {
            return localVarFp.listEntities_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 14.1.
         * @summary List all GitLab Migrations
         * @param {BulkImportsApiListMigrationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMigrations(requestParameters: BulkImportsApiListMigrationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesBulkImport>> {
            return localVarFp.listMigrations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 14.2.
         * @summary Start a new GitLab Migration
         * @param {BulkImportsApiStartNewMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startNewMigration(requestParameters: BulkImportsApiStartNewMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBulkImport> {
            return localVarFp.startNewMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEntityDetails operation in BulkImportsApi.
 * @export
 * @interface BulkImportsApiGetEntityDetailsRequest
 */
export type BulkImportsApiGetEntityDetailsRequest = {
    
    /**
    * The ID of user\'s GitLab Migration
    * @type {number}
    * @memberof BulkImportsApiGetEntityDetails
    */
    readonly importId: number
    
    /**
    * The ID of GitLab Migration entity
    * @type {number}
    * @memberof BulkImportsApiGetEntityDetails
    */
    readonly entityId: number
    
}

/**
 * Request parameters for getMigrationDetails operation in BulkImportsApi.
 * @export
 * @interface BulkImportsApiGetMigrationDetailsRequest
 */
export type BulkImportsApiGetMigrationDetailsRequest = {
    
    /**
    * The ID of user\'s GitLab Migration
    * @type {number}
    * @memberof BulkImportsApiGetMigrationDetails
    */
    readonly importId: number
    
}

/**
 * Request parameters for listEntities operation in BulkImportsApi.
 * @export
 * @interface BulkImportsApiListEntitiesRequest
 */
export type BulkImportsApiListEntitiesRequest = {
    
    /**
    * The ID of user\'s GitLab Migration
    * @type {number}
    * @memberof BulkImportsApiListEntities
    */
    readonly importId: number
    
    /**
    * Return import entities with specified status
    * @type {'created' | 'started' | 'finished' | 'timeout' | 'failed'}
    * @memberof BulkImportsApiListEntities
    */
    readonly status?: 'created' | 'started' | 'finished' | 'timeout' | 'failed'
    
    /**
    * Current page number
    * @type {number}
    * @memberof BulkImportsApiListEntities
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof BulkImportsApiListEntities
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listEntities_1 operation in BulkImportsApi.
 * @export
 * @interface BulkImportsApiListEntities0Request
 */
export type BulkImportsApiListEntities0Request = {
    
    /**
    * Current page number
    * @type {number}
    * @memberof BulkImportsApiListEntities0
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof BulkImportsApiListEntities0
    */
    readonly perPage?: number
    
    /**
    * Return GitLab Migrations sorted in created by `asc` or `desc` order.
    * @type {'asc' | 'desc'}
    * @memberof BulkImportsApiListEntities0
    */
    readonly sort?: 'asc' | 'desc'
    
    /**
    * Return all GitLab Migrations\' entities with specified status
    * @type {'created' | 'started' | 'finished' | 'timeout' | 'failed'}
    * @memberof BulkImportsApiListEntities0
    */
    readonly status?: 'created' | 'started' | 'finished' | 'timeout' | 'failed'
    
}

/**
 * Request parameters for listMigrations operation in BulkImportsApi.
 * @export
 * @interface BulkImportsApiListMigrationsRequest
 */
export type BulkImportsApiListMigrationsRequest = {
    
    /**
    * Current page number
    * @type {number}
    * @memberof BulkImportsApiListMigrations
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof BulkImportsApiListMigrations
    */
    readonly perPage?: number
    
    /**
    * Return GitLab Migrations sorted in created by `asc` or `desc` order.
    * @type {'asc' | 'desc'}
    * @memberof BulkImportsApiListMigrations
    */
    readonly sort?: 'asc' | 'desc'
    
    /**
    * Return GitLab Migrations with specified status
    * @type {'created' | 'started' | 'finished' | 'timeout' | 'failed'}
    * @memberof BulkImportsApiListMigrations
    */
    readonly status?: 'created' | 'started' | 'finished' | 'timeout' | 'failed'
    
}

/**
 * Request parameters for startNewMigration operation in BulkImportsApi.
 * @export
 * @interface BulkImportsApiStartNewMigrationRequest
 */
export type BulkImportsApiStartNewMigrationRequest = {
    
    /**
    * Source GitLab instance URL
    * @type {string}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly configurationUrl: string
    
    /**
    * Access token to the source GitLab instance
    * @type {string}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly configurationAccessToken: string
    
    /**
    * Source entity type
    * @type {Array<string>}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly entitiesSourceType: Array<string>
    
    /**
    * Relative path of the source entity to import
    * @type {Array<string>}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly entitiesSourceFullPath: Array<string>
    
    /**
    * Destination namespace for the entity
    * @type {Array<string>}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly entitiesDestinationNamespace: Array<string>
    
    /**
    * Destination slug for the entity
    * @type {Array<string>}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly entitiesDestinationSlug?: Array<string>
    
    /**
    * Deprecated: Use :destination_slug instead. Destination slug for the entity
    * @type {Array<string>}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly entitiesDestinationName?: Array<string>
    
    /**
    * Indicates group migration should include nested projects
    * @type {Array<boolean>}
    * @memberof BulkImportsApiStartNewMigration
    */
    readonly entitiesMigrateProjects?: Array<boolean>
    
} & BulkimportsStartNewMigrationRequest

/**
 * BulkImportsApiGenerated - object-oriented interface
 * @export
 * @class BulkImportsApiGenerated
 * @extends {BaseAPI}
 */
export class BulkImportsApiGenerated extends BaseAPI {
    /**
     * This feature was introduced in GitLab 14.1.
     * @summary Get GitLab Migration entity details
     * @param {BulkImportsApiGetEntityDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportsApiGenerated
     */
    public getEntityDetails(requestParameters: BulkImportsApiGetEntityDetailsRequest, options?: AxiosRequestConfig) {
        return BulkImportsApiFp(this.configuration).getEntityDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 14.1.
     * @summary Get GitLab Migration details
     * @param {BulkImportsApiGetMigrationDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportsApiGenerated
     */
    public getMigrationDetails(requestParameters: BulkImportsApiGetMigrationDetailsRequest, options?: AxiosRequestConfig) {
        return BulkImportsApiFp(this.configuration).getMigrationDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 14.1.
     * @summary List GitLab Migration entities
     * @param {BulkImportsApiListEntitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportsApiGenerated
     */
    public listEntities(requestParameters: BulkImportsApiListEntitiesRequest, options?: AxiosRequestConfig) {
        return BulkImportsApiFp(this.configuration).listEntities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 14.1.
     * @summary List all GitLab Migrations\' entities
     * @param {BulkImportsApiListEntities0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportsApiGenerated
     */
    public listEntities_1(requestParameters: BulkImportsApiListEntities0Request = {}, options?: AxiosRequestConfig) {
        return BulkImportsApiFp(this.configuration).listEntities_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 14.1.
     * @summary List all GitLab Migrations
     * @param {BulkImportsApiListMigrationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportsApiGenerated
     */
    public listMigrations(requestParameters: BulkImportsApiListMigrationsRequest = {}, options?: AxiosRequestConfig) {
        return BulkImportsApiFp(this.configuration).listMigrations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 14.2.
     * @summary Start a new GitLab Migration
     * @param {BulkImportsApiStartNewMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkImportsApiGenerated
     */
    public startNewMigration(requestParameters: BulkImportsApiStartNewMigrationRequest, options?: AxiosRequestConfig) {
        return BulkImportsApiFp(this.configuration).startNewMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
