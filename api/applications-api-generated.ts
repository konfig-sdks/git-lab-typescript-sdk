/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesApplication } from '../models';
// @ts-ignore
import { APIEntitiesApplicationWithSecret } from '../models';
// @ts-ignore
import { ApplicationsCreateNewApplicationRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApplicationsApi - axios parameter creator
 * @export
 */
export const ApplicationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature was introduced in GitLab 10.5
         * @summary Create a new application
         * @param {ApplicationsCreateNewApplicationRequest} applicationsCreateNewApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication: async (applicationsCreateNewApplicationRequest: ApplicationsCreateNewApplicationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationsCreateNewApplicationRequest' is not null or undefined
            assertParamExists('createNewApplication', 'applicationsCreateNewApplicationRequest', applicationsCreateNewApplicationRequest)
            const localVarPath = `/api/v4/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: applicationsCreateNewApplicationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/applications',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(applicationsCreateNewApplicationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific application
         * @summary Delete an application
         * @param {number} id The ID of the application (not the application_id)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificApplication: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSpecificApplication', 'id', id)
            const localVarPath = `/api/v4/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/applications/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all registered applications
         * @summary Get applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllRegistered: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/applications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationsApi - functional programming interface
 * @export
 */
export const ApplicationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature was introduced in GitLab 10.5
         * @summary Create a new application
         * @param {ApplicationsApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewApplication(requestParameters: ApplicationsApiCreateNewApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesApplicationWithSecret>> {
            const applicationsCreateNewApplicationRequest: ApplicationsCreateNewApplicationRequest = {
                name: requestParameters.name,
                redirect_uri: requestParameters.redirect_uri,
                scopes: requestParameters.scopes,
                confidential: requestParameters.confidential
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewApplication(applicationsCreateNewApplicationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific application
         * @summary Delete an application
         * @param {ApplicationsApiDeleteSpecificApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificApplication(requestParameters: ApplicationsApiDeleteSpecificApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificApplication(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all registered applications
         * @summary Get applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllRegistered(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesApplication>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllRegistered(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationsApi - factory interface
 * @export
 */
export const ApplicationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationsApiFp(configuration)
    return {
        /**
         * This feature was introduced in GitLab 10.5
         * @summary Create a new application
         * @param {ApplicationsApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication(requestParameters: ApplicationsApiCreateNewApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesApplicationWithSecret> {
            return localVarFp.createNewApplication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific application
         * @summary Delete an application
         * @param {ApplicationsApiDeleteSpecificApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificApplication(requestParameters: ApplicationsApiDeleteSpecificApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSpecificApplication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all registered applications
         * @summary Get applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllRegistered(options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesApplication>> {
            return localVarFp.listAllRegistered(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiCreateNewApplicationRequest
 */
export type ApplicationsApiCreateNewApplicationRequest = {
    
} & ApplicationsCreateNewApplicationRequest

/**
 * Request parameters for deleteSpecificApplication operation in ApplicationsApi.
 * @export
 * @interface ApplicationsApiDeleteSpecificApplicationRequest
 */
export type ApplicationsApiDeleteSpecificApplicationRequest = {
    
    /**
    * The ID of the application (not the application_id)
    * @type {number}
    * @memberof ApplicationsApiDeleteSpecificApplication
    */
    readonly id: number
    
}

/**
 * ApplicationsApiGenerated - object-oriented interface
 * @export
 * @class ApplicationsApiGenerated
 * @extends {BaseAPI}
 */
export class ApplicationsApiGenerated extends BaseAPI {
    /**
     * This feature was introduced in GitLab 10.5
     * @summary Create a new application
     * @param {ApplicationsApiCreateNewApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApiGenerated
     */
    public createNewApplication(requestParameters: ApplicationsApiCreateNewApplicationRequest, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).createNewApplication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific application
     * @summary Delete an application
     * @param {ApplicationsApiDeleteSpecificApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApiGenerated
     */
    public deleteSpecificApplication(requestParameters: ApplicationsApiDeleteSpecificApplicationRequest, options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).deleteSpecificApplication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all registered applications
     * @summary Get applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationsApiGenerated
     */
    public listAllRegistered(options?: AxiosRequestConfig) {
        return ApplicationsApiFp(this.configuration).listAllRegistered(options).then((request) => request(this.axios, this.basePath));
    }
}
