/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesDictionaryTable } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve dictionary details
         * @param {'main' | 'ci'} databaseName The database name
         * @param {string} tableName The table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryDetails: async (databaseName: 'main' | 'ci', tableName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'databaseName' is not null or undefined
            assertParamExists('getDictionaryDetails', 'databaseName', databaseName)
            // verify required parameter 'tableName' is not null or undefined
            assertParamExists('getDictionaryDetails', 'tableName', tableName)
            const localVarPath = `/api/v4/admin/databases/{database_name}/dictionary/tables/{table_name}`
                .replace(`{${"database_name"}}`, encodeURIComponent(String(databaseName !== undefined ? databaseName : `-database_name-`)))
                .replace(`{${"table_name"}}`, encodeURIComponent(String(tableName !== undefined ? tableName : `-table_name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/databases/{database_name}/dictionary/tables/{table_name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve dictionary details
         * @param {AdminApiGetDictionaryDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDictionaryDetails(requestParameters: AdminApiGetDictionaryDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesDictionaryTable>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDictionaryDetails(requestParameters.databaseName, requestParameters.tableName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Retrieve dictionary details
         * @param {AdminApiGetDictionaryDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDictionaryDetails(requestParameters: AdminApiGetDictionaryDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesDictionaryTable> {
            return localVarFp.getDictionaryDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDictionaryDetails operation in AdminApi.
 * @export
 * @interface AdminApiGetDictionaryDetailsRequest
 */
export type AdminApiGetDictionaryDetailsRequest = {
    
    /**
    * The database name
    * @type {'main' | 'ci'}
    * @memberof AdminApiGetDictionaryDetails
    */
    readonly databaseName: 'main' | 'ci'
    
    /**
    * The table name
    * @type {string}
    * @memberof AdminApiGetDictionaryDetails
    */
    readonly tableName: string
    
}

/**
 * AdminApiGenerated - object-oriented interface
 * @export
 * @class AdminApiGenerated
 * @extends {BaseAPI}
 */
export class AdminApiGenerated extends BaseAPI {
    /**
     * Retrieve dictionary details
     * @param {AdminApiGetDictionaryDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public getDictionaryDetails(requestParameters: AdminApiGetDictionaryDetailsRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getDictionaryDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
