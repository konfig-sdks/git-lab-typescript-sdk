/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesAvatar } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AvatarApi - axios parameter creator
 * @export
 */
export const AvatarApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return avatar url for a user
         * @param {string} email Public email address of the user
         * @param {number} [size] Single pixel dimension for Gravatar images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlForUser: async (email: string, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('getUrlForUser', 'email', email)
            const localVarPath = `/api/v4/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/avatar',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatarApi - functional programming interface
 * @export
 */
export const AvatarApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvatarApiAxiosParamCreator(configuration)
    return {
        /**
         * Return avatar url for a user
         * @param {AvatarApiGetUrlForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUrlForUser(requestParameters: AvatarApiGetUrlForUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAvatar>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUrlForUser(requestParameters.email, requestParameters.size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvatarApi - factory interface
 * @export
 */
export const AvatarApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvatarApiFp(configuration)
    return {
        /**
         * Return avatar url for a user
         * @param {AvatarApiGetUrlForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUrlForUser(requestParameters: AvatarApiGetUrlForUserRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAvatar> {
            return localVarFp.getUrlForUser(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUrlForUser operation in AvatarApi.
 * @export
 * @interface AvatarApiGetUrlForUserRequest
 */
export type AvatarApiGetUrlForUserRequest = {
    
    /**
    * Public email address of the user
    * @type {string}
    * @memberof AvatarApiGetUrlForUser
    */
    readonly email: string
    
    /**
    * Single pixel dimension for Gravatar images
    * @type {number}
    * @memberof AvatarApiGetUrlForUser
    */
    readonly size?: number
    
}

/**
 * AvatarApiGenerated - object-oriented interface
 * @export
 * @class AvatarApiGenerated
 * @extends {BaseAPI}
 */
export class AvatarApiGenerated extends BaseAPI {
    /**
     * Return avatar url for a user
     * @param {AvatarApiGetUrlForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarApiGenerated
     */
    public getUrlForUser(requestParameters: AvatarApiGetUrlForUserRequest, options?: AxiosRequestConfig) {
        return AvatarApiFp(this.configuration).getUrlForUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
