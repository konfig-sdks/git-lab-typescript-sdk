/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesMetadata } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MetadataApi - axios parameter creator
 * @export
 */
export const MetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature was introduced in GitLab 15.2.
         * @summary Retrieve metadata information for this GitLab instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/metadata',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.13 and deprecated in 15.5. We recommend you instead use the Metadata API.
         * @summary Retrieves version information for the GitLab instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionInformation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/version',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetadataApi - functional programming interface
 * @export
 */
export const MetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature was introduced in GitLab 15.2.
         * @summary Retrieve metadata information for this GitLab instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.13 and deprecated in 15.5. We recommend you instead use the Metadata API.
         * @summary Retrieves version information for the GitLab instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVersionInformation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVersionInformation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetadataApi - factory interface
 * @export
 */
export const MetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetadataApiFp(configuration)
    return {
        /**
         * This feature was introduced in GitLab 15.2.
         * @summary Retrieve metadata information for this GitLab instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformation(options?: AxiosRequestConfig): AxiosPromise<APIEntitiesMetadata> {
            return localVarFp.getInformation(options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.13 and deprecated in 15.5. We recommend you instead use the Metadata API.
         * @summary Retrieves version information for the GitLab instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersionInformation(options?: AxiosRequestConfig): AxiosPromise<APIEntitiesMetadata> {
            return localVarFp.getVersionInformation(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetadataApiGenerated - object-oriented interface
 * @export
 * @class MetadataApiGenerated
 * @extends {BaseAPI}
 */
export class MetadataApiGenerated extends BaseAPI {
    /**
     * This feature was introduced in GitLab 15.2.
     * @summary Retrieve metadata information for this GitLab instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getInformation(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getInformation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.13 and deprecated in 15.5. We recommend you instead use the Metadata API.
     * @summary Retrieves version information for the GitLab instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApiGenerated
     */
    public getVersionInformation(options?: AxiosRequestConfig) {
        return MetadataApiFp(this.configuration).getVersionInformation(options).then((request) => request(this.axios, this.basePath));
    }
}
