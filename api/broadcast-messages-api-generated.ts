/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesBroadcastMessage } from '../models';
// @ts-ignore
import { BroadcastmessagesCreateMessageRequest } from '../models';
// @ts-ignore
import { BroadcastmessagesUpdateMessageRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BroadcastMessagesApi - axios parameter creator
 * @export
 */
export const BroadcastMessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Create a broadcast message
         * @param {BroadcastmessagesCreateMessageRequest} broadcastmessagesCreateMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage: async (broadcastmessagesCreateMessageRequest: BroadcastmessagesCreateMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'broadcastmessagesCreateMessageRequest' is not null or undefined
            assertParamExists('createMessage', 'broadcastmessagesCreateMessageRequest', broadcastmessagesCreateMessageRequest)
            const localVarPath = `/api/v4/broadcast_messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: broadcastmessagesCreateMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/broadcast_messages',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(broadcastmessagesCreateMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Delete a broadcast message
         * @param {number} id Broadcast message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMessage', 'id', id)
            const localVarPath = `/api/v4/broadcast_messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/broadcast_messages/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Get a specific broadcast message
         * @param {number} id Broadcast message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificMessage: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSpecificMessage', 'id', id)
            const localVarPath = `/api/v4/broadcast_messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/broadcast_messages/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Get all broadcast messages
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/broadcast_messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/broadcast_messages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Update a broadcast message
         * @param {number} id Broadcast message ID
         * @param {BroadcastmessagesUpdateMessageRequest} [broadcastmessagesUpdateMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage: async (id: number, broadcastmessagesUpdateMessageRequest?: BroadcastmessagesUpdateMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMessage', 'id', id)
            const localVarPath = `/api/v4/broadcast_messages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: broadcastmessagesUpdateMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/broadcast_messages/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(broadcastmessagesUpdateMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BroadcastMessagesApi - functional programming interface
 * @export
 */
export const BroadcastMessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BroadcastMessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Create a broadcast message
         * @param {BroadcastMessagesApiCreateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessage(requestParameters: BroadcastMessagesApiCreateMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBroadcastMessage>> {
            const broadcastmessagesCreateMessageRequest: BroadcastmessagesCreateMessageRequest = {
                message: requestParameters.message,
                starts_at: requestParameters.starts_at,
                ends_at: requestParameters.ends_at,
                color: requestParameters.color,
                font: requestParameters.font,
                target_access_levels: requestParameters.target_access_levels,
                target_path: requestParameters.target_path,
                broadcast_type: requestParameters.broadcast_type,
                dismissable: requestParameters.dismissable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessage(broadcastmessagesCreateMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Delete a broadcast message
         * @param {BroadcastMessagesApiDeleteMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessage(requestParameters: BroadcastMessagesApiDeleteMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBroadcastMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Get a specific broadcast message
         * @param {BroadcastMessagesApiGetSpecificMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificMessage(requestParameters: BroadcastMessagesApiGetSpecificMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBroadcastMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificMessage(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Get all broadcast messages
         * @param {BroadcastMessagesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: BroadcastMessagesApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBroadcastMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Update a broadcast message
         * @param {BroadcastMessagesApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessage(requestParameters: BroadcastMessagesApiUpdateMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBroadcastMessage>> {
            const broadcastmessagesUpdateMessageRequest: BroadcastmessagesUpdateMessageRequest = {
                message: requestParameters.message,
                starts_at: requestParameters.starts_at,
                ends_at: requestParameters.ends_at,
                color: requestParameters.color,
                font: requestParameters.font,
                target_access_levels: requestParameters.target_access_levels,
                target_path: requestParameters.target_path,
                broadcast_type: requestParameters.broadcast_type,
                dismissable: requestParameters.dismissable
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(requestParameters.id, broadcastmessagesUpdateMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BroadcastMessagesApi - factory interface
 * @export
 */
export const BroadcastMessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BroadcastMessagesApiFp(configuration)
    return {
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Create a broadcast message
         * @param {BroadcastMessagesApiCreateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessage(requestParameters: BroadcastMessagesApiCreateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBroadcastMessage> {
            return localVarFp.createMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Delete a broadcast message
         * @param {BroadcastMessagesApiDeleteMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage(requestParameters: BroadcastMessagesApiDeleteMessageRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBroadcastMessage> {
            return localVarFp.deleteMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Get a specific broadcast message
         * @param {BroadcastMessagesApiGetSpecificMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificMessage(requestParameters: BroadcastMessagesApiGetSpecificMessageRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBroadcastMessage> {
            return localVarFp.getSpecificMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Get all broadcast messages
         * @param {BroadcastMessagesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: BroadcastMessagesApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBroadcastMessage> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 8.12.
         * @summary Update a broadcast message
         * @param {BroadcastMessagesApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(requestParameters: BroadcastMessagesApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBroadcastMessage> {
            return localVarFp.updateMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMessage operation in BroadcastMessagesApi.
 * @export
 * @interface BroadcastMessagesApiCreateMessageRequest
 */
export type BroadcastMessagesApiCreateMessageRequest = {
    
} & BroadcastmessagesCreateMessageRequest

/**
 * Request parameters for deleteMessage operation in BroadcastMessagesApi.
 * @export
 * @interface BroadcastMessagesApiDeleteMessageRequest
 */
export type BroadcastMessagesApiDeleteMessageRequest = {
    
    /**
    * Broadcast message ID
    * @type {number}
    * @memberof BroadcastMessagesApiDeleteMessage
    */
    readonly id: number
    
}

/**
 * Request parameters for getSpecificMessage operation in BroadcastMessagesApi.
 * @export
 * @interface BroadcastMessagesApiGetSpecificMessageRequest
 */
export type BroadcastMessagesApiGetSpecificMessageRequest = {
    
    /**
    * Broadcast message ID
    * @type {number}
    * @memberof BroadcastMessagesApiGetSpecificMessage
    */
    readonly id: number
    
}

/**
 * Request parameters for listAll operation in BroadcastMessagesApi.
 * @export
 * @interface BroadcastMessagesApiListAllRequest
 */
export type BroadcastMessagesApiListAllRequest = {
    
    /**
    * Current page number
    * @type {number}
    * @memberof BroadcastMessagesApiListAll
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof BroadcastMessagesApiListAll
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for updateMessage operation in BroadcastMessagesApi.
 * @export
 * @interface BroadcastMessagesApiUpdateMessageRequest
 */
export type BroadcastMessagesApiUpdateMessageRequest = {
    
    /**
    * Broadcast message ID
    * @type {number}
    * @memberof BroadcastMessagesApiUpdateMessage
    */
    readonly id: number
    
} & BroadcastmessagesUpdateMessageRequest

/**
 * BroadcastMessagesApiGenerated - object-oriented interface
 * @export
 * @class BroadcastMessagesApiGenerated
 * @extends {BaseAPI}
 */
export class BroadcastMessagesApiGenerated extends BaseAPI {
    /**
     * This feature was introduced in GitLab 8.12.
     * @summary Create a broadcast message
     * @param {BroadcastMessagesApiCreateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastMessagesApiGenerated
     */
    public createMessage(requestParameters: BroadcastMessagesApiCreateMessageRequest, options?: AxiosRequestConfig) {
        return BroadcastMessagesApiFp(this.configuration).createMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.12.
     * @summary Delete a broadcast message
     * @param {BroadcastMessagesApiDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastMessagesApiGenerated
     */
    public deleteMessage(requestParameters: BroadcastMessagesApiDeleteMessageRequest, options?: AxiosRequestConfig) {
        return BroadcastMessagesApiFp(this.configuration).deleteMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.12.
     * @summary Get a specific broadcast message
     * @param {BroadcastMessagesApiGetSpecificMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastMessagesApiGenerated
     */
    public getSpecificMessage(requestParameters: BroadcastMessagesApiGetSpecificMessageRequest, options?: AxiosRequestConfig) {
        return BroadcastMessagesApiFp(this.configuration).getSpecificMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.12.
     * @summary Get all broadcast messages
     * @param {BroadcastMessagesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastMessagesApiGenerated
     */
    public listAll(requestParameters: BroadcastMessagesApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return BroadcastMessagesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 8.12.
     * @summary Update a broadcast message
     * @param {BroadcastMessagesApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastMessagesApiGenerated
     */
    public updateMessage(requestParameters: BroadcastMessagesApiUpdateMessageRequest, options?: AxiosRequestConfig) {
        return BroadcastMessagesApiFp(this.configuration).updateMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
