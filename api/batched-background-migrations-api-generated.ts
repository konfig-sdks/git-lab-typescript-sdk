/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesBatchedBackgroundMigration } from '../models';
// @ts-ignore
import { BatchedbackgroundmigrationsPauseMigrationRequest } from '../models';
// @ts-ignore
import { BatchedbackgroundmigrationsResumeMigrationRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BatchedBackgroundMigrationsApi - axios parameter creator
 * @export
 */
export const BatchedBackgroundMigrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a batched background migration
         * @param {number} id The batched background migration id
         * @param {'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo'} [database] The name of the database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigration: async (id: number, database?: 'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMigration', 'id', id)
            const localVarPath = `/api/v4/admin/batched_background_migrations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (database !== undefined) {
                localVarQueryParameter['database'] = database;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/batched_background_migrations/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of batched background migrations
         * @param {'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo'} [database] The name of the database, the default &#x60;main&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (database?: 'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/admin/batched_background_migrations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (database !== undefined) {
                localVarQueryParameter['database'] = database;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/batched_background_migrations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pause a batched background migration
         * @param {number} id The batched background migration id
         * @param {BatchedbackgroundmigrationsPauseMigrationRequest} [batchedbackgroundmigrationsPauseMigrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseMigration: async (id: number, batchedbackgroundmigrationsPauseMigrationRequest?: BatchedbackgroundmigrationsPauseMigrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pauseMigration', 'id', id)
            const localVarPath = `/api/v4/admin/batched_background_migrations/{id}/pause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: batchedbackgroundmigrationsPauseMigrationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/batched_background_migrations/{id}/pause',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(batchedbackgroundmigrationsPauseMigrationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resume a batched background migration
         * @param {number} id The batched background migration id
         * @param {BatchedbackgroundmigrationsResumeMigrationRequest} [batchedbackgroundmigrationsResumeMigrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeMigration: async (id: number, batchedbackgroundmigrationsResumeMigrationRequest?: BatchedbackgroundmigrationsResumeMigrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resumeMigration', 'id', id)
            const localVarPath = `/api/v4/admin/batched_background_migrations/{id}/resume`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: batchedbackgroundmigrationsResumeMigrationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/batched_background_migrations/{id}/resume',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(batchedbackgroundmigrationsResumeMigrationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchedBackgroundMigrationsApi - functional programming interface
 * @export
 */
export const BatchedBackgroundMigrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchedBackgroundMigrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a batched background migration
         * @param {BatchedBackgroundMigrationsApiGetMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMigration(requestParameters: BatchedBackgroundMigrationsApiGetMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBatchedBackgroundMigration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMigration(requestParameters.id, requestParameters.database, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the list of batched background migrations
         * @param {BatchedBackgroundMigrationsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: BatchedBackgroundMigrationsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesBatchedBackgroundMigration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.database, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pause a batched background migration
         * @param {BatchedBackgroundMigrationsApiPauseMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseMigration(requestParameters: BatchedBackgroundMigrationsApiPauseMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBatchedBackgroundMigration>> {
            const batchedbackgroundmigrationsPauseMigrationRequest: BatchedbackgroundmigrationsPauseMigrationRequest = {
                database: requestParameters.database
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseMigration(requestParameters.id, batchedbackgroundmigrationsPauseMigrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resume a batched background migration
         * @param {BatchedBackgroundMigrationsApiResumeMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeMigration(requestParameters: BatchedBackgroundMigrationsApiResumeMigrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBatchedBackgroundMigration>> {
            const batchedbackgroundmigrationsResumeMigrationRequest: BatchedbackgroundmigrationsResumeMigrationRequest = {
                database: requestParameters.database
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeMigration(requestParameters.id, batchedbackgroundmigrationsResumeMigrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchedBackgroundMigrationsApi - factory interface
 * @export
 */
export const BatchedBackgroundMigrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchedBackgroundMigrationsApiFp(configuration)
    return {
        /**
         * Retrieve a batched background migration
         * @param {BatchedBackgroundMigrationsApiGetMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMigration(requestParameters: BatchedBackgroundMigrationsApiGetMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBatchedBackgroundMigration> {
            return localVarFp.getMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of batched background migrations
         * @param {BatchedBackgroundMigrationsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: BatchedBackgroundMigrationsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesBatchedBackgroundMigration>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Pause a batched background migration
         * @param {BatchedBackgroundMigrationsApiPauseMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseMigration(requestParameters: BatchedBackgroundMigrationsApiPauseMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBatchedBackgroundMigration> {
            return localVarFp.pauseMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Resume a batched background migration
         * @param {BatchedBackgroundMigrationsApiResumeMigrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeMigration(requestParameters: BatchedBackgroundMigrationsApiResumeMigrationRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBatchedBackgroundMigration> {
            return localVarFp.resumeMigration(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMigration operation in BatchedBackgroundMigrationsApi.
 * @export
 * @interface BatchedBackgroundMigrationsApiGetMigrationRequest
 */
export type BatchedBackgroundMigrationsApiGetMigrationRequest = {
    
    /**
    * The batched background migration id
    * @type {number}
    * @memberof BatchedBackgroundMigrationsApiGetMigration
    */
    readonly id: number
    
    /**
    * The name of the database
    * @type {'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo'}
    * @memberof BatchedBackgroundMigrationsApiGetMigration
    */
    readonly database?: 'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo'
    
}

/**
 * Request parameters for list operation in BatchedBackgroundMigrationsApi.
 * @export
 * @interface BatchedBackgroundMigrationsApiListRequest
 */
export type BatchedBackgroundMigrationsApiListRequest = {
    
    /**
    * The name of the database, the default `main`
    * @type {'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo'}
    * @memberof BatchedBackgroundMigrationsApiList
    */
    readonly database?: 'main' | 'ci' | 'embedding' | 'main_clusterwide' | 'geo'
    
}

/**
 * Request parameters for pauseMigration operation in BatchedBackgroundMigrationsApi.
 * @export
 * @interface BatchedBackgroundMigrationsApiPauseMigrationRequest
 */
export type BatchedBackgroundMigrationsApiPauseMigrationRequest = {
    
    /**
    * The batched background migration id
    * @type {number}
    * @memberof BatchedBackgroundMigrationsApiPauseMigration
    */
    readonly id: number
    
} & BatchedbackgroundmigrationsPauseMigrationRequest

/**
 * Request parameters for resumeMigration operation in BatchedBackgroundMigrationsApi.
 * @export
 * @interface BatchedBackgroundMigrationsApiResumeMigrationRequest
 */
export type BatchedBackgroundMigrationsApiResumeMigrationRequest = {
    
    /**
    * The batched background migration id
    * @type {number}
    * @memberof BatchedBackgroundMigrationsApiResumeMigration
    */
    readonly id: number
    
} & BatchedbackgroundmigrationsResumeMigrationRequest

/**
 * BatchedBackgroundMigrationsApiGenerated - object-oriented interface
 * @export
 * @class BatchedBackgroundMigrationsApiGenerated
 * @extends {BaseAPI}
 */
export class BatchedBackgroundMigrationsApiGenerated extends BaseAPI {
    /**
     * Retrieve a batched background migration
     * @param {BatchedBackgroundMigrationsApiGetMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchedBackgroundMigrationsApiGenerated
     */
    public getMigration(requestParameters: BatchedBackgroundMigrationsApiGetMigrationRequest, options?: AxiosRequestConfig) {
        return BatchedBackgroundMigrationsApiFp(this.configuration).getMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of batched background migrations
     * @param {BatchedBackgroundMigrationsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchedBackgroundMigrationsApiGenerated
     */
    public list(requestParameters: BatchedBackgroundMigrationsApiListRequest = {}, options?: AxiosRequestConfig) {
        return BatchedBackgroundMigrationsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pause a batched background migration
     * @param {BatchedBackgroundMigrationsApiPauseMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchedBackgroundMigrationsApiGenerated
     */
    public pauseMigration(requestParameters: BatchedBackgroundMigrationsApiPauseMigrationRequest, options?: AxiosRequestConfig) {
        return BatchedBackgroundMigrationsApiFp(this.configuration).pauseMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resume a batched background migration
     * @param {BatchedBackgroundMigrationsApiResumeMigrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchedBackgroundMigrationsApiGenerated
     */
    public resumeMigration(requestParameters: BatchedBackgroundMigrationsApiResumeMigrationRequest, options?: AxiosRequestConfig) {
        return BatchedBackgroundMigrationsApiFp(this.configuration).resumeMigration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
