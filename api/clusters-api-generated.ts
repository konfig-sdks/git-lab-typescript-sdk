/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesCluster } from '../models';
// @ts-ignore
import { ClustersAddExistingKubernetesInstanceClusterRequest } from '../models';
// @ts-ignore
import { ClustersUpdateInstanceClusterRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ClustersApi - axios parameter creator
 * @export
 */
export const ClustersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.
         * @summary Add existing instance cluster
         * @param {ClustersAddExistingKubernetesInstanceClusterRequest} clustersAddExistingKubernetesInstanceClusterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExistingKubernetesInstanceCluster: async (clustersAddExistingKubernetesInstanceClusterRequest: ClustersAddExistingKubernetesInstanceClusterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clustersAddExistingKubernetesInstanceClusterRequest' is not null or undefined
            assertParamExists('addExistingKubernetesInstanceCluster', 'clustersAddExistingKubernetesInstanceClusterRequest', clustersAddExistingKubernetesInstanceClusterRequest)
            const localVarPath = `/api/v4/admin/clusters/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: clustersAddExistingKubernetesInstanceClusterRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/clusters/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(clustersAddExistingKubernetesInstanceClusterRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.
         * @summary Delete instance cluster
         * @param {number} clusterId The cluster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstanceCluster: async (clusterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterId' is not null or undefined
            assertParamExists('deleteInstanceCluster', 'clusterId', clusterId)
            const localVarPath = `/api/v4/admin/clusters/{cluster_id}`
                .replace(`{${"cluster_id"}}`, encodeURIComponent(String(clusterId !== undefined ? clusterId : `-cluster_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/clusters/{cluster_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 13.2. Returns a single instance cluster.
         * @summary Get a single instance cluster
         * @param {number} clusterId The cluster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleInstanceCluster: async (clusterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterId' is not null or undefined
            assertParamExists('getSingleInstanceCluster', 'clusterId', clusterId)
            const localVarPath = `/api/v4/admin/clusters/{cluster_id}`
                .replace(`{${"cluster_id"}}`, encodeURIComponent(String(clusterId !== undefined ? clusterId : `-cluster_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/clusters/{cluster_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 13.2. Returns a list of instance clusters.
         * @summary List instance clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstanceClusters: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/admin/clusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/clusters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 13.2. Updates an existing instance cluster.
         * @summary Edit instance cluster
         * @param {number} clusterId The cluster ID
         * @param {ClustersUpdateInstanceClusterRequest} [clustersUpdateInstanceClusterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceCluster: async (clusterId: number, clustersUpdateInstanceClusterRequest?: ClustersUpdateInstanceClusterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clusterId' is not null or undefined
            assertParamExists('updateInstanceCluster', 'clusterId', clusterId)
            const localVarPath = `/api/v4/admin/clusters/{cluster_id}`
                .replace(`{${"cluster_id"}}`, encodeURIComponent(String(clusterId !== undefined ? clusterId : `-cluster_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: clustersUpdateInstanceClusterRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/admin/clusters/{cluster_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(clustersUpdateInstanceClusterRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClustersApi - functional programming interface
 * @export
 */
export const ClustersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClustersApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.
         * @summary Add existing instance cluster
         * @param {ClustersApiAddExistingKubernetesInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExistingKubernetesInstanceCluster(requestParameters: ClustersApiAddExistingKubernetesInstanceClusterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesCluster>> {
            const clustersAddExistingKubernetesInstanceClusterRequest: ClustersAddExistingKubernetesInstanceClusterRequest = {
                name: requestParameters.name,
                enabled: requestParameters.enabled,
                environment_scope: requestParameters.environment_scope,
                namespace_per_environment: requestParameters.namespace_per_environment,
                domain: requestParameters.domain,
                management_project_id: requestParameters.management_project_id,
                managed: requestParameters.managed,
                platform_kubernetes_attributes[api_url]: requestParameters.platform_kubernetes_attributes[api_url],
                platform_kubernetes_attributes[token]: requestParameters.platform_kubernetes_attributes[token],
                platform_kubernetes_attributes[ca_cert]: requestParameters.platform_kubernetes_attributes[ca_cert],
                platform_kubernetes_attributes[namespace]: requestParameters.platform_kubernetes_attributes[namespace],
                platform_kubernetes_attributes[authorization_type]: requestParameters.platform_kubernetes_attributes[authorization_type]
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addExistingKubernetesInstanceCluster(clustersAddExistingKubernetesInstanceClusterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.
         * @summary Delete instance cluster
         * @param {ClustersApiDeleteInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInstanceCluster(requestParameters: ClustersApiDeleteInstanceClusterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesCluster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInstanceCluster(requestParameters.clusterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 13.2. Returns a single instance cluster.
         * @summary Get a single instance cluster
         * @param {ClustersApiGetSingleInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleInstanceCluster(requestParameters: ClustersApiGetSingleInstanceClusterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesCluster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleInstanceCluster(requestParameters.clusterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 13.2. Returns a list of instance clusters.
         * @summary List instance clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInstanceClusters(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesCluster>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInstanceClusters(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 13.2. Updates an existing instance cluster.
         * @summary Edit instance cluster
         * @param {ClustersApiUpdateInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstanceCluster(requestParameters: ClustersApiUpdateInstanceClusterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesCluster>> {
            const clustersUpdateInstanceClusterRequest: ClustersUpdateInstanceClusterRequest = {
                name: requestParameters.name,
                enabled: requestParameters.enabled,
                environment_scope: requestParameters.environment_scope,
                namespace_per_environment: requestParameters.namespace_per_environment,
                domain: requestParameters.domain,
                management_project_id: requestParameters.management_project_id,
                managed: requestParameters.managed,
                platform_kubernetes_attributes[api_url]: requestParameters.platform_kubernetes_attributes[api_url],
                platform_kubernetes_attributes[token]: requestParameters.platform_kubernetes_attributes[token],
                platform_kubernetes_attributes[ca_cert]: requestParameters.platform_kubernetes_attributes[ca_cert],
                platform_kubernetes_attributes[namespace]: requestParameters.platform_kubernetes_attributes[namespace]
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstanceCluster(requestParameters.clusterId, clustersUpdateInstanceClusterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClustersApi - factory interface
 * @export
 */
export const ClustersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClustersApiFp(configuration)
    return {
        /**
         * This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.
         * @summary Add existing instance cluster
         * @param {ClustersApiAddExistingKubernetesInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExistingKubernetesInstanceCluster(requestParameters: ClustersApiAddExistingKubernetesInstanceClusterRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesCluster> {
            return localVarFp.addExistingKubernetesInstanceCluster(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.
         * @summary Delete instance cluster
         * @param {ClustersApiDeleteInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInstanceCluster(requestParameters: ClustersApiDeleteInstanceClusterRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesCluster> {
            return localVarFp.deleteInstanceCluster(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 13.2. Returns a single instance cluster.
         * @summary Get a single instance cluster
         * @param {ClustersApiGetSingleInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleInstanceCluster(requestParameters: ClustersApiGetSingleInstanceClusterRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesCluster> {
            return localVarFp.getSingleInstanceCluster(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 13.2. Returns a list of instance clusters.
         * @summary List instance clusters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInstanceClusters(options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesCluster>> {
            return localVarFp.listInstanceClusters(options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 13.2. Updates an existing instance cluster.
         * @summary Edit instance cluster
         * @param {ClustersApiUpdateInstanceClusterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceCluster(requestParameters: ClustersApiUpdateInstanceClusterRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesCluster> {
            return localVarFp.updateInstanceCluster(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addExistingKubernetesInstanceCluster operation in ClustersApi.
 * @export
 * @interface ClustersApiAddExistingKubernetesInstanceClusterRequest
 */
export type ClustersApiAddExistingKubernetesInstanceClusterRequest = {
    
} & ClustersAddExistingKubernetesInstanceClusterRequest

/**
 * Request parameters for deleteInstanceCluster operation in ClustersApi.
 * @export
 * @interface ClustersApiDeleteInstanceClusterRequest
 */
export type ClustersApiDeleteInstanceClusterRequest = {
    
    /**
    * The cluster ID
    * @type {number}
    * @memberof ClustersApiDeleteInstanceCluster
    */
    readonly clusterId: number
    
}

/**
 * Request parameters for getSingleInstanceCluster operation in ClustersApi.
 * @export
 * @interface ClustersApiGetSingleInstanceClusterRequest
 */
export type ClustersApiGetSingleInstanceClusterRequest = {
    
    /**
    * The cluster ID
    * @type {number}
    * @memberof ClustersApiGetSingleInstanceCluster
    */
    readonly clusterId: number
    
}

/**
 * Request parameters for updateInstanceCluster operation in ClustersApi.
 * @export
 * @interface ClustersApiUpdateInstanceClusterRequest
 */
export type ClustersApiUpdateInstanceClusterRequest = {
    
    /**
    * The cluster ID
    * @type {number}
    * @memberof ClustersApiUpdateInstanceCluster
    */
    readonly clusterId: number
    
} & ClustersUpdateInstanceClusterRequest

/**
 * ClustersApiGenerated - object-oriented interface
 * @export
 * @class ClustersApiGenerated
 * @extends {BaseAPI}
 */
export class ClustersApiGenerated extends BaseAPI {
    /**
     * This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.
     * @summary Add existing instance cluster
     * @param {ClustersApiAddExistingKubernetesInstanceClusterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApiGenerated
     */
    public addExistingKubernetesInstanceCluster(requestParameters: ClustersApiAddExistingKubernetesInstanceClusterRequest, options?: AxiosRequestConfig) {
        return ClustersApiFp(this.configuration).addExistingKubernetesInstanceCluster(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.
     * @summary Delete instance cluster
     * @param {ClustersApiDeleteInstanceClusterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApiGenerated
     */
    public deleteInstanceCluster(requestParameters: ClustersApiDeleteInstanceClusterRequest, options?: AxiosRequestConfig) {
        return ClustersApiFp(this.configuration).deleteInstanceCluster(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 13.2. Returns a single instance cluster.
     * @summary Get a single instance cluster
     * @param {ClustersApiGetSingleInstanceClusterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApiGenerated
     */
    public getSingleInstanceCluster(requestParameters: ClustersApiGetSingleInstanceClusterRequest, options?: AxiosRequestConfig) {
        return ClustersApiFp(this.configuration).getSingleInstanceCluster(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 13.2. Returns a list of instance clusters.
     * @summary List instance clusters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApiGenerated
     */
    public listInstanceClusters(options?: AxiosRequestConfig) {
        return ClustersApiFp(this.configuration).listInstanceClusters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 13.2. Updates an existing instance cluster.
     * @summary Edit instance cluster
     * @param {ClustersApiUpdateInstanceClusterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApiGenerated
     */
    public updateInstanceCluster(requestParameters: ClustersApiUpdateInstanceClusterRequest, options?: AxiosRequestConfig) {
        return ClustersApiFp(this.configuration).updateInstanceCluster(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
