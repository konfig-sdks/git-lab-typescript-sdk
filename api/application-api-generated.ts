/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesAppearance } from '../models';
// @ts-ignore
import { ApplicationModifyAppearanceRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the current appearance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentAppearance: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/application/appearance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/application/appearance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify appearance
         * @param {string} [title] Instance title on the sign in / sign up page
         * @param {string} [description] Markdown text shown on the sign in / sign up page
         * @param {string} [pwaName] Name of the Progressive Web App
         * @param {string} [pwaShortName] Optional, short name for Progressive Web App
         * @param {string} [pwaDescription] An explanation of what the Progressive Web App does
         * @param {Uint8Array | File | buffer.File} [logo] Instance image used on the sign in / sign up page
         * @param {Uint8Array | File | buffer.File} [pwaIcon] Icon used for Progressive Web App
         * @param {Uint8Array | File | buffer.File} [headerLogo] Instance image used for the main navigation bar
         * @param {Uint8Array | File | buffer.File} [favicon] Instance favicon in .ico/.png format
         * @param {string} [newProjectGuidelines] Markdown text shown on the new project page
         * @param {string} [profileImageGuidelines] Markdown text shown on the profile page below Public Avatar
         * @param {string} [headerMessage] Message within the system header bar
         * @param {string} [footerMessage] Message within the system footer bar
         * @param {string} [messageBackgroundColor] Background color for the system header / footer bar
         * @param {string} [messageFontColor] Font color for the system header / footer bar
         * @param {boolean} [emailHeaderAndFooterEnabled] Add header and footer to all outgoing emails if enabled
         * @param {ApplicationModifyAppearanceRequest} [applicationModifyAppearanceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyAppearance: async (title?: string, description?: string, pwaName?: string, pwaShortName?: string, pwaDescription?: string, logo?: Uint8Array | File | buffer.File, pwaIcon?: Uint8Array | File | buffer.File, headerLogo?: Uint8Array | File | buffer.File, favicon?: Uint8Array | File | buffer.File, newProjectGuidelines?: string, profileImageGuidelines?: string, headerMessage?: string, footerMessage?: string, messageBackgroundColor?: string, messageFontColor?: string, emailHeaderAndFooterEnabled?: boolean, applicationModifyAppearanceRequest?: ApplicationModifyAppearanceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v4/application/appearance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

            if (title !== undefined) {
                await addFormParam('title', title, false, true)
            }
    
            if (description !== undefined) {
                await addFormParam('description', description, false, true)
            }
    
            if (pwaName !== undefined) {
                await addFormParam('pwa_name', pwaName, false, true)
            }
    
            if (pwaShortName !== undefined) {
                await addFormParam('pwa_short_name', pwaShortName, false, true)
            }
    
            if (pwaDescription !== undefined) {
                await addFormParam('pwa_description', pwaDescription, false, true)
            }
    
            if (logo !== undefined) {
                await addFormParam('logo', logo, true, true)
            }
    
            if (pwaIcon !== undefined) {
                await addFormParam('pwa_icon', pwaIcon, true, true)
            }
    
            if (headerLogo !== undefined) {
                await addFormParam('header_logo', headerLogo, true, true)
            }
    
            if (favicon !== undefined) {
                await addFormParam('favicon', favicon, true, true)
            }
    
            if (newProjectGuidelines !== undefined) {
                await addFormParam('new_project_guidelines', newProjectGuidelines, false, true)
            }
    
            if (profileImageGuidelines !== undefined) {
                await addFormParam('profile_image_guidelines', profileImageGuidelines, false, true)
            }
    
            if (headerMessage !== undefined) {
                await addFormParam('header_message', headerMessage, false, true)
            }
    
            if (footerMessage !== undefined) {
                await addFormParam('footer_message', footerMessage, false, true)
            }
    
            if (messageBackgroundColor !== undefined) {
                await addFormParam('message_background_color', messageBackgroundColor, false, true)
            }
    
            if (messageFontColor !== undefined) {
                await addFormParam('message_font_color', messageFontColor, false, true)
            }
    
            if (emailHeaderAndFooterEnabled !== undefined) {
                await addFormParam('email_header_and_footer_enabled', emailHeaderAndFooterEnabled, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: applicationModifyAppearanceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/application/appearance',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the current appearance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentAppearance(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAppearance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentAppearance(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Modify appearance
         * @param {ApplicationApiModifyAppearanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyAppearance(requestParameters: ApplicationApiModifyAppearanceRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesAppearance>> {
            const applicationModifyAppearanceRequest: ApplicationModifyAppearanceRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                pwa_name: requestParameters.pwa_name,
                pwa_short_name: requestParameters.pwa_short_name,
                pwa_description: requestParameters.pwa_description,
                logo: requestParameters.logo,
                pwa_icon: requestParameters.pwa_icon,
                header_logo: requestParameters.header_logo,
                favicon: requestParameters.favicon,
                new_project_guidelines: requestParameters.new_project_guidelines,
                profile_image_guidelines: requestParameters.profile_image_guidelines,
                header_message: requestParameters.header_message,
                footer_message: requestParameters.footer_message,
                message_background_color: requestParameters.message_background_color,
                message_font_color: requestParameters.message_font_color,
                email_header_and_footer_enabled: requestParameters.email_header_and_footer_enabled
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyAppearance(requestParameters.title, requestParameters.description, requestParameters.pwaName, requestParameters.pwaShortName, requestParameters.pwaDescription, requestParameters.logo, requestParameters.pwaIcon, requestParameters.headerLogo, requestParameters.favicon, requestParameters.newProjectGuidelines, requestParameters.profileImageGuidelines, requestParameters.headerMessage, requestParameters.footerMessage, requestParameters.messageBackgroundColor, requestParameters.messageFontColor, requestParameters.emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationApiFp(configuration)
    return {
        /**
         * Get the current appearance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentAppearance(options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAppearance> {
            return localVarFp.getCurrentAppearance(options).then((request) => request(axios, basePath));
        },
        /**
         * Modify appearance
         * @param {ApplicationApiModifyAppearanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyAppearance(requestParameters: ApplicationApiModifyAppearanceRequest = {}, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesAppearance> {
            return localVarFp.modifyAppearance(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for modifyAppearance operation in ApplicationApi.
 * @export
 * @interface ApplicationApiModifyAppearanceRequest
 */
export type ApplicationApiModifyAppearanceRequest = {
    
    /**
    * Instance title on the sign in / sign up page
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly title?: string
    
    /**
    * Markdown text shown on the sign in / sign up page
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly description?: string
    
    /**
    * Name of the Progressive Web App
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly pwaName?: string
    
    /**
    * Optional, short name for Progressive Web App
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly pwaShortName?: string
    
    /**
    * An explanation of what the Progressive Web App does
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly pwaDescription?: string
    
    /**
    * Instance image used on the sign in / sign up page
    * @type {Uint8Array | File | buffer.File}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly logo?: Uint8Array | File | buffer.File
    
    /**
    * Icon used for Progressive Web App
    * @type {Uint8Array | File | buffer.File}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly pwaIcon?: Uint8Array | File | buffer.File
    
    /**
    * Instance image used for the main navigation bar
    * @type {Uint8Array | File | buffer.File}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly headerLogo?: Uint8Array | File | buffer.File
    
    /**
    * Instance favicon in .ico/.png format
    * @type {Uint8Array | File | buffer.File}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly favicon?: Uint8Array | File | buffer.File
    
    /**
    * Markdown text shown on the new project page
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly newProjectGuidelines?: string
    
    /**
    * Markdown text shown on the profile page below Public Avatar
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly profileImageGuidelines?: string
    
    /**
    * Message within the system header bar
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly headerMessage?: string
    
    /**
    * Message within the system footer bar
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly footerMessage?: string
    
    /**
    * Background color for the system header / footer bar
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly messageBackgroundColor?: string
    
    /**
    * Font color for the system header / footer bar
    * @type {string}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly messageFontColor?: string
    
    /**
    * Add header and footer to all outgoing emails if enabled
    * @type {boolean}
    * @memberof ApplicationApiModifyAppearance
    */
    readonly emailHeaderAndFooterEnabled?: boolean
    
} & ApplicationModifyAppearanceRequest

/**
 * ApplicationApiGenerated - object-oriented interface
 * @export
 * @class ApplicationApiGenerated
 * @extends {BaseAPI}
 */
export class ApplicationApiGenerated extends BaseAPI {
    /**
     * Get the current appearance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public getCurrentAppearance(options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).getCurrentAppearance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify appearance
     * @param {ApplicationApiModifyAppearanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApiGenerated
     */
    public modifyAppearance(requestParameters: ApplicationApiModifyAppearanceRequest = {}, options?: AxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).modifyAppearance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
