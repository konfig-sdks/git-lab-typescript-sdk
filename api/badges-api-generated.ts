/* tslint:disable */
/* eslint-disable */
/*
GitLab API

An OpenAPI definition for the GitLab REST API.
Few API resources or endpoints are currently included.
The intent is to expand this to match the entire Markdown documentation of the API:
<https://docs.gitlab.com/ee/api/>. Contributions are welcome.

When viewing this on gitlab.com, you can test API calls directly from the browser
against the `gitlab.com` instance, if you are logged in.
The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie),
so each request is made using your account.

Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html)


The version of the OpenAPI document: v4


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIEntitiesBadge } from '../models';
// @ts-ignore
import { APIEntitiesBasicBadgeDetails } from '../models';
// @ts-ignore
import { BadgesAddBadgeToGroupRequest } from '../models';
// @ts-ignore
import { BadgesAddProjectBadgeRequest } from '../models';
// @ts-ignore
import { BadgesUpdateGroupBadgeRequest } from '../models';
// @ts-ignore
import { BadgesUpdateProjectBadgeRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BadgesApi - axios parameter creator
 * @export
 */
export const BadgesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Adds a badge to a group.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user.
         * @param {BadgesAddBadgeToGroupRequest} badgesAddBadgeToGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBadgeToGroup: async (id: string, badgesAddBadgeToGroupRequest: BadgesAddBadgeToGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addBadgeToGroup', 'id', id)
            // verify required parameter 'badgesAddBadgeToGroupRequest' is not null or undefined
            assertParamExists('addBadgeToGroup', 'badgesAddBadgeToGroupRequest', badgesAddBadgeToGroupRequest)
            const localVarPath = `/api/v4/groups/{id}/badges`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: badgesAddBadgeToGroupRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/badges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(badgesAddBadgeToGroupRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Adds a badge to a project.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user.
         * @param {BadgesAddProjectBadgeRequest} badgesAddProjectBadgeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectBadge: async (id: string, badgesAddProjectBadgeRequest: BadgesAddProjectBadgeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addProjectBadge', 'id', id)
            // verify required parameter 'badgesAddProjectBadgeRequest' is not null or undefined
            assertParamExists('addProjectBadge', 'badgesAddProjectBadgeRequest', badgesAddProjectBadgeRequest)
            const localVarPath = `/api/v4/projects/{id}/badges`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: badgesAddProjectBadgeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/badges',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(badgesAddProjectBadgeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a badge of a group.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user.
         * @param {number} badgeId The badge ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupBadge: async (id: string, badgeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupBadge', 'id', id)
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('getGroupBadge', 'badgeId', badgeId)
            const localVarPath = `/api/v4/groups/{id}/badges/{badge_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badgeId !== undefined ? badgeId : `-badge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/badges/{badge_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a list of group badges viewable by the authenticated user.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user.
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {string} [name] Name for the badge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (id: string, page?: number, perPage?: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getList', 'id', id)
            const localVarPath = `/api/v4/groups/{id}/badges`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/badges',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a badge of a project.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user.
         * @param {number} badgeId The badge ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBadge: async (id: string, badgeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectBadge', 'id', id)
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('getProjectBadge', 'badgeId', badgeId)
            const localVarPath = `/api/v4/projects/{id}/badges/{badge_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badgeId !== undefined ? badgeId : `-badge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/badges/{badge_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a list of project badges viewable by the authenticated user.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user.
         * @param {number} [page] Current page number
         * @param {number} [perPage] Number of items per page
         * @param {string} [name] Name for the badge
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViewableByAuthenticatedUser: async (id: string, page?: number, perPage?: number, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listViewableByAuthenticatedUser', 'id', id)
            const localVarPath = `/api/v4/projects/{id}/badges`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/badges',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Preview a badge from a group.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user.
         * @param {string} linkUrl URL of the badge link
         * @param {string} imageUrl URL of the badge image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewBadgeFromGroup: async (id: string, linkUrl: string, imageUrl: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('previewBadgeFromGroup', 'id', id)
            // verify required parameter 'linkUrl' is not null or undefined
            assertParamExists('previewBadgeFromGroup', 'linkUrl', linkUrl)
            // verify required parameter 'imageUrl' is not null or undefined
            assertParamExists('previewBadgeFromGroup', 'imageUrl', imageUrl)
            const localVarPath = `/api/v4/groups/{id}/badges/render`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (linkUrl !== undefined) {
                localVarQueryParameter['link_url'] = linkUrl;
            }

            if (imageUrl !== undefined) {
                localVarQueryParameter['image_url'] = imageUrl;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/badges/render',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Removes a badge from the group.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user.
         * @param {number} badgeId The badge ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromGroup: async (id: string, badgeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeFromGroup', 'id', id)
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('removeFromGroup', 'badgeId', badgeId)
            const localVarPath = `/api/v4/groups/{id}/badges/{badge_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badgeId !== undefined ? badgeId : `-badge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/badges/{badge_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Removes a badge from the project.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user.
         * @param {number} badgeId The badge ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromProject: async (id: string, badgeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeFromProject', 'id', id)
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('removeFromProject', 'badgeId', badgeId)
            const localVarPath = `/api/v4/projects/{id}/badges/{badge_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badgeId !== undefined ? badgeId : `-badge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/badges/{badge_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Preview a badge from a project.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user.
         * @param {string} linkUrl URL of the badge link
         * @param {string} imageUrl URL of the badge image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderPreviewFromProject: async (id: string, linkUrl: string, imageUrl: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('renderPreviewFromProject', 'id', id)
            // verify required parameter 'linkUrl' is not null or undefined
            assertParamExists('renderPreviewFromProject', 'linkUrl', linkUrl)
            // verify required parameter 'imageUrl' is not null or undefined
            assertParamExists('renderPreviewFromProject', 'imageUrl', imageUrl)
            const localVarPath = `/api/v4/projects/{id}/badges/render`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })
            if (linkUrl !== undefined) {
                localVarQueryParameter['link_url'] = linkUrl;
            }

            if (imageUrl !== undefined) {
                localVarQueryParameter['image_url'] = imageUrl;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/badges/render',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Updates a badge of a group.
         * @param {string} id The ID or URL-encoded path of the group owned by the authenticated user.
         * @param {number} badgeId 
         * @param {BadgesUpdateGroupBadgeRequest} [badgesUpdateGroupBadgeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupBadge: async (id: string, badgeId: number, badgesUpdateGroupBadgeRequest?: BadgesUpdateGroupBadgeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroupBadge', 'id', id)
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('updateGroupBadge', 'badgeId', badgeId)
            const localVarPath = `/api/v4/groups/{id}/badges/{badge_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badgeId !== undefined ? badgeId : `-badge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: badgesUpdateGroupBadgeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/groups/{id}/badges/{badge_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(badgesUpdateGroupBadgeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Updates a badge of a project.
         * @param {string} id The ID or URL-encoded path of the project owned by the authenticated user.
         * @param {number} badgeId 
         * @param {BadgesUpdateProjectBadgeRequest} [badgesUpdateProjectBadgeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectBadge: async (id: string, badgeId: number, badgesUpdateProjectBadgeRequest?: BadgesUpdateProjectBadgeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateProjectBadge', 'id', id)
            // verify required parameter 'badgeId' is not null or undefined
            assertParamExists('updateProjectBadge', 'badgeId', badgeId)
            const localVarPath = `/api/v4/projects/{id}/badges/{badge_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"badge_id"}}`, encodeURIComponent(String(badgeId !== undefined ? badgeId : `-badge_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Private-Token", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: badgesUpdateProjectBadgeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v4/projects/{id}/badges/{badge_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(badgesUpdateProjectBadgeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BadgesApi - functional programming interface
 * @export
 */
export const BadgesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BadgesApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Adds a badge to a group.
         * @param {BadgesApiAddBadgeToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBadgeToGroup(requestParameters: BadgesApiAddBadgeToGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBadge>> {
            const badgesAddBadgeToGroupRequest: BadgesAddBadgeToGroupRequest = {
                link_url: requestParameters.link_url,
                image_url: requestParameters.image_url,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBadgeToGroup(requestParameters.id, badgesAddBadgeToGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Adds a badge to a project.
         * @param {BadgesApiAddProjectBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProjectBadge(requestParameters: BadgesApiAddProjectBadgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBadge>> {
            const badgesAddProjectBadgeRequest: BadgesAddProjectBadgeRequest = {
                link_url: requestParameters.link_url,
                image_url: requestParameters.image_url,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProjectBadge(requestParameters.id, badgesAddProjectBadgeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a badge of a group.
         * @param {BadgesApiGetGroupBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupBadge(requestParameters: BadgesApiGetGroupBadgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBadge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupBadge(requestParameters.id, requestParameters.badgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a list of group badges viewable by the authenticated user.
         * @param {BadgesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: BadgesApiGetListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesBadge>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.id, requestParameters.page, requestParameters.perPage, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a badge of a project.
         * @param {BadgesApiGetProjectBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectBadge(requestParameters: BadgesApiGetProjectBadgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBadge>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectBadge(requestParameters.id, requestParameters.badgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a list of project badges viewable by the authenticated user.
         * @param {BadgesApiListViewableByAuthenticatedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listViewableByAuthenticatedUser(requestParameters: BadgesApiListViewableByAuthenticatedUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIEntitiesBadge>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listViewableByAuthenticatedUser(requestParameters.id, requestParameters.page, requestParameters.perPage, requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Preview a badge from a group.
         * @param {BadgesApiPreviewBadgeFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previewBadgeFromGroup(requestParameters: BadgesApiPreviewBadgeFromGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBasicBadgeDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.previewBadgeFromGroup(requestParameters.id, requestParameters.linkUrl, requestParameters.imageUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Removes a badge from the group.
         * @param {BadgesApiRemoveFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromGroup(requestParameters: BadgesApiRemoveFromGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromGroup(requestParameters.id, requestParameters.badgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Removes a badge from the project.
         * @param {BadgesApiRemoveFromProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromProject(requestParameters: BadgesApiRemoveFromProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromProject(requestParameters.id, requestParameters.badgeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Preview a badge from a project.
         * @param {BadgesApiRenderPreviewFromProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async renderPreviewFromProject(requestParameters: BadgesApiRenderPreviewFromProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBasicBadgeDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.renderPreviewFromProject(requestParameters.id, requestParameters.linkUrl, requestParameters.imageUrl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Updates a badge of a group.
         * @param {BadgesApiUpdateGroupBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroupBadge(requestParameters: BadgesApiUpdateGroupBadgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBadge>> {
            const badgesUpdateGroupBadgeRequest: BadgesUpdateGroupBadgeRequest = {
                link_url: requestParameters.link_url,
                image_url: requestParameters.image_url,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroupBadge(requestParameters.id, requestParameters.badgeId, badgesUpdateGroupBadgeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Updates a badge of a project.
         * @param {BadgesApiUpdateProjectBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectBadge(requestParameters: BadgesApiUpdateProjectBadgeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIEntitiesBadge>> {
            const badgesUpdateProjectBadgeRequest: BadgesUpdateProjectBadgeRequest = {
                link_url: requestParameters.link_url,
                image_url: requestParameters.image_url,
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectBadge(requestParameters.id, requestParameters.badgeId, badgesUpdateProjectBadgeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BadgesApi - factory interface
 * @export
 */
export const BadgesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BadgesApiFp(configuration)
    return {
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Adds a badge to a group.
         * @param {BadgesApiAddBadgeToGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBadgeToGroup(requestParameters: BadgesApiAddBadgeToGroupRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBadge> {
            return localVarFp.addBadgeToGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Adds a badge to a project.
         * @param {BadgesApiAddProjectBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectBadge(requestParameters: BadgesApiAddProjectBadgeRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBadge> {
            return localVarFp.addProjectBadge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a badge of a group.
         * @param {BadgesApiGetGroupBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupBadge(requestParameters: BadgesApiGetGroupBadgeRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBadge> {
            return localVarFp.getGroupBadge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a list of group badges viewable by the authenticated user.
         * @param {BadgesApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: BadgesApiGetListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesBadge>> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a badge of a project.
         * @param {BadgesApiGetProjectBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectBadge(requestParameters: BadgesApiGetProjectBadgeRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBadge> {
            return localVarFp.getProjectBadge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Gets a list of project badges viewable by the authenticated user.
         * @param {BadgesApiListViewableByAuthenticatedUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listViewableByAuthenticatedUser(requestParameters: BadgesApiListViewableByAuthenticatedUserRequest, options?: AxiosRequestConfig): AxiosPromise<Array<APIEntitiesBadge>> {
            return localVarFp.listViewableByAuthenticatedUser(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Preview a badge from a group.
         * @param {BadgesApiPreviewBadgeFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previewBadgeFromGroup(requestParameters: BadgesApiPreviewBadgeFromGroupRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBasicBadgeDetails> {
            return localVarFp.previewBadgeFromGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Removes a badge from the group.
         * @param {BadgesApiRemoveFromGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromGroup(requestParameters: BadgesApiRemoveFromGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Removes a badge from the project.
         * @param {BadgesApiRemoveFromProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromProject(requestParameters: BadgesApiRemoveFromProjectRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFromProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Preview a badge from a project.
         * @param {BadgesApiRenderPreviewFromProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderPreviewFromProject(requestParameters: BadgesApiRenderPreviewFromProjectRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBasicBadgeDetails> {
            return localVarFp.renderPreviewFromProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Updates a badge of a group.
         * @param {BadgesApiUpdateGroupBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroupBadge(requestParameters: BadgesApiUpdateGroupBadgeRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBadge> {
            return localVarFp.updateGroupBadge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This feature was introduced in GitLab 10.6.
         * @summary Updates a badge of a project.
         * @param {BadgesApiUpdateProjectBadgeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectBadge(requestParameters: BadgesApiUpdateProjectBadgeRequest, options?: AxiosRequestConfig): AxiosPromise<APIEntitiesBadge> {
            return localVarFp.updateProjectBadge(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBadgeToGroup operation in BadgesApi.
 * @export
 * @interface BadgesApiAddBadgeToGroupRequest
 */
export type BadgesApiAddBadgeToGroupRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiAddBadgeToGroup
    */
    readonly id: string
    
} & BadgesAddBadgeToGroupRequest

/**
 * Request parameters for addProjectBadge operation in BadgesApi.
 * @export
 * @interface BadgesApiAddProjectBadgeRequest
 */
export type BadgesApiAddProjectBadgeRequest = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiAddProjectBadge
    */
    readonly id: string
    
} & BadgesAddProjectBadgeRequest

/**
 * Request parameters for getGroupBadge operation in BadgesApi.
 * @export
 * @interface BadgesApiGetGroupBadgeRequest
 */
export type BadgesApiGetGroupBadgeRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiGetGroupBadge
    */
    readonly id: string
    
    /**
    * The badge ID
    * @type {number}
    * @memberof BadgesApiGetGroupBadge
    */
    readonly badgeId: number
    
}

/**
 * Request parameters for getList operation in BadgesApi.
 * @export
 * @interface BadgesApiGetListRequest
 */
export type BadgesApiGetListRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiGetList
    */
    readonly id: string
    
    /**
    * Current page number
    * @type {number}
    * @memberof BadgesApiGetList
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof BadgesApiGetList
    */
    readonly perPage?: number
    
    /**
    * Name for the badge
    * @type {string}
    * @memberof BadgesApiGetList
    */
    readonly name?: string
    
}

/**
 * Request parameters for getProjectBadge operation in BadgesApi.
 * @export
 * @interface BadgesApiGetProjectBadgeRequest
 */
export type BadgesApiGetProjectBadgeRequest = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiGetProjectBadge
    */
    readonly id: string
    
    /**
    * The badge ID
    * @type {number}
    * @memberof BadgesApiGetProjectBadge
    */
    readonly badgeId: number
    
}

/**
 * Request parameters for listViewableByAuthenticatedUser operation in BadgesApi.
 * @export
 * @interface BadgesApiListViewableByAuthenticatedUserRequest
 */
export type BadgesApiListViewableByAuthenticatedUserRequest = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiListViewableByAuthenticatedUser
    */
    readonly id: string
    
    /**
    * Current page number
    * @type {number}
    * @memberof BadgesApiListViewableByAuthenticatedUser
    */
    readonly page?: number
    
    /**
    * Number of items per page
    * @type {number}
    * @memberof BadgesApiListViewableByAuthenticatedUser
    */
    readonly perPage?: number
    
    /**
    * Name for the badge
    * @type {string}
    * @memberof BadgesApiListViewableByAuthenticatedUser
    */
    readonly name?: string
    
}

/**
 * Request parameters for previewBadgeFromGroup operation in BadgesApi.
 * @export
 * @interface BadgesApiPreviewBadgeFromGroupRequest
 */
export type BadgesApiPreviewBadgeFromGroupRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiPreviewBadgeFromGroup
    */
    readonly id: string
    
    /**
    * URL of the badge link
    * @type {string}
    * @memberof BadgesApiPreviewBadgeFromGroup
    */
    readonly linkUrl: string
    
    /**
    * URL of the badge image
    * @type {string}
    * @memberof BadgesApiPreviewBadgeFromGroup
    */
    readonly imageUrl: string
    
}

/**
 * Request parameters for removeFromGroup operation in BadgesApi.
 * @export
 * @interface BadgesApiRemoveFromGroupRequest
 */
export type BadgesApiRemoveFromGroupRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiRemoveFromGroup
    */
    readonly id: string
    
    /**
    * The badge ID
    * @type {number}
    * @memberof BadgesApiRemoveFromGroup
    */
    readonly badgeId: number
    
}

/**
 * Request parameters for removeFromProject operation in BadgesApi.
 * @export
 * @interface BadgesApiRemoveFromProjectRequest
 */
export type BadgesApiRemoveFromProjectRequest = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiRemoveFromProject
    */
    readonly id: string
    
    /**
    * The badge ID
    * @type {number}
    * @memberof BadgesApiRemoveFromProject
    */
    readonly badgeId: number
    
}

/**
 * Request parameters for renderPreviewFromProject operation in BadgesApi.
 * @export
 * @interface BadgesApiRenderPreviewFromProjectRequest
 */
export type BadgesApiRenderPreviewFromProjectRequest = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiRenderPreviewFromProject
    */
    readonly id: string
    
    /**
    * URL of the badge link
    * @type {string}
    * @memberof BadgesApiRenderPreviewFromProject
    */
    readonly linkUrl: string
    
    /**
    * URL of the badge image
    * @type {string}
    * @memberof BadgesApiRenderPreviewFromProject
    */
    readonly imageUrl: string
    
}

/**
 * Request parameters for updateGroupBadge operation in BadgesApi.
 * @export
 * @interface BadgesApiUpdateGroupBadgeRequest
 */
export type BadgesApiUpdateGroupBadgeRequest = {
    
    /**
    * The ID or URL-encoded path of the group owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiUpdateGroupBadge
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof BadgesApiUpdateGroupBadge
    */
    readonly badgeId: number
    
} & BadgesUpdateGroupBadgeRequest

/**
 * Request parameters for updateProjectBadge operation in BadgesApi.
 * @export
 * @interface BadgesApiUpdateProjectBadgeRequest
 */
export type BadgesApiUpdateProjectBadgeRequest = {
    
    /**
    * The ID or URL-encoded path of the project owned by the authenticated user.
    * @type {string}
    * @memberof BadgesApiUpdateProjectBadge
    */
    readonly id: string
    
    /**
    * 
    * @type {number}
    * @memberof BadgesApiUpdateProjectBadge
    */
    readonly badgeId: number
    
} & BadgesUpdateProjectBadgeRequest

/**
 * BadgesApiGenerated - object-oriented interface
 * @export
 * @class BadgesApiGenerated
 * @extends {BaseAPI}
 */
export class BadgesApiGenerated extends BaseAPI {
    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Adds a badge to a group.
     * @param {BadgesApiAddBadgeToGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public addBadgeToGroup(requestParameters: BadgesApiAddBadgeToGroupRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).addBadgeToGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Adds a badge to a project.
     * @param {BadgesApiAddProjectBadgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public addProjectBadge(requestParameters: BadgesApiAddProjectBadgeRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).addProjectBadge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Gets a badge of a group.
     * @param {BadgesApiGetGroupBadgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public getGroupBadge(requestParameters: BadgesApiGetGroupBadgeRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).getGroupBadge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Gets a list of group badges viewable by the authenticated user.
     * @param {BadgesApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public getList(requestParameters: BadgesApiGetListRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Gets a badge of a project.
     * @param {BadgesApiGetProjectBadgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public getProjectBadge(requestParameters: BadgesApiGetProjectBadgeRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).getProjectBadge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Gets a list of project badges viewable by the authenticated user.
     * @param {BadgesApiListViewableByAuthenticatedUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public listViewableByAuthenticatedUser(requestParameters: BadgesApiListViewableByAuthenticatedUserRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).listViewableByAuthenticatedUser(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Preview a badge from a group.
     * @param {BadgesApiPreviewBadgeFromGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public previewBadgeFromGroup(requestParameters: BadgesApiPreviewBadgeFromGroupRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).previewBadgeFromGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Removes a badge from the group.
     * @param {BadgesApiRemoveFromGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public removeFromGroup(requestParameters: BadgesApiRemoveFromGroupRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).removeFromGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Removes a badge from the project.
     * @param {BadgesApiRemoveFromProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public removeFromProject(requestParameters: BadgesApiRemoveFromProjectRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).removeFromProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Preview a badge from a project.
     * @param {BadgesApiRenderPreviewFromProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public renderPreviewFromProject(requestParameters: BadgesApiRenderPreviewFromProjectRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).renderPreviewFromProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Updates a badge of a group.
     * @param {BadgesApiUpdateGroupBadgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public updateGroupBadge(requestParameters: BadgesApiUpdateGroupBadgeRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).updateGroupBadge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This feature was introduced in GitLab 10.6.
     * @summary Updates a badge of a project.
     * @param {BadgesApiUpdateProjectBadgeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BadgesApiGenerated
     */
    public updateProjectBadge(requestParameters: BadgesApiUpdateProjectBadgeRequest, options?: AxiosRequestConfig) {
        return BadgesApiFp(this.configuration).updateProjectBadge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
